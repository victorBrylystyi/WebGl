{"map":"{\"version\":3,\"sources\":[\"bundle.js\"],\"names\":[\"modules\",\"installedModules\",\"__webpack_require__\",\"moduleId\",\"exports\",\"module\",\"i\",\"l\",\"call\",\"m\",\"c\",\"d\",\"name\",\"getter\",\"o\",\"Object\",\"defineProperty\",\"enumerable\",\"get\",\"r\",\"Symbol\",\"toStringTag\",\"value\",\"t\",\"mode\",\"__esModule\",\"ns\",\"create\",\"key\",\"bind\",\"n\",\"object\",\"property\",\"prototype\",\"hasOwnProperty\",\"p\",\"s\",\"__webpack_exports__\",\"eval\"],\"mappings\":\"CAAS,SAAUA,GAET,IAAIC,EAAmB,GAGvB,SAASC,EAAoBC,GAG5B,GAAGF,EAAiBE,GACnB,OAAOF,EAAiBE,GAAUC,QAGnC,IAAIC,EAASJ,EAAiBE,GAAY,CACzCG,EAAGH,EACHI,GAAG,EACHH,QAAS,IAUV,OANAJ,EAAQG,GAAUK,KAAKH,EAAOD,QAASC,EAAQA,EAAOD,QAASF,GAG/DG,EAAOE,GAAI,EAGJF,EAAOD,QAKfF,EAAoBO,EAAIT,EAGxBE,EAAoBQ,EAAIT,EAGxBC,EAAoBS,EAAI,SAASP,EAASQ,EAAMC,GAC3CX,EAAoBY,EAAEV,EAASQ,IAClCG,OAAOC,eAAeZ,EAASQ,EAAM,CAAEK,YAAY,EAAMC,IAAKL,KAKhEX,EAAoBiB,EAAI,SAASf,GACX,oBAAXgB,QAA0BA,OAAOC,aAC1CN,OAAOC,eAAeZ,EAASgB,OAAOC,YAAa,CAAEC,MAAO,WAE7DP,OAAOC,eAAeZ,EAAS,aAAc,CAAEkB,OAAO,KAQvDpB,EAAoBqB,EAAI,SAASD,EAAOE,GAEvC,GADU,EAAPA,IAAUF,EAAQpB,EAAoBoB,IAC/B,EAAPE,EAAU,OAAOF,EACpB,GAAW,EAAPE,GAA8B,iBAAVF,GAAsBA,GAASA,EAAMG,WAAY,OAAOH,EAChF,IAAII,EAAKX,OAAOY,OAAO,MAGvB,GAFAzB,EAAoBiB,EAAEO,GACtBX,OAAOC,eAAeU,EAAI,UAAW,CAAET,YAAY,EAAMK,MAAOA,IACtD,EAAPE,GAA4B,iBAATF,EAAmB,IAAI,IAAIM,KAAON,EAAOpB,EAAoBS,EAAEe,EAAIE,EAAK,SAASA,GAAO,OAAON,EAAMM,IAAQC,KAAK,KAAMD,IAC9I,OAAOF,GAIRxB,EAAoB4B,EAAI,SAASzB,GAChC,IAAIQ,EAASR,GAAUA,EAAOoB,WAC7B,WAAwB,OAAOpB,EAAgB,SAC/C,WAA8B,OAAOA,GAEtC,OADAH,EAAoBS,EAAEE,EAAQ,IAAKA,GAC5BA,GAIRX,EAAoBY,EAAI,SAASiB,EAAQC,GAAY,OAAOjB,OAAOkB,UAAUC,eAAe1B,KAAKuB,EAAQC,IAGzG9B,EAAoBiC,EAAI,GAIjBjC,EAAoBA,EAAoBkC,EAAI,GAnFpD,CAsFC,CAEJ,SAAU/B,OAAQgC,oBAAqBnC,qBAE7C,aACAoC,KAAK\"}","code":"!function(g){var I={};function C(A){if(I[A])return I[A].exports;var t=I[A]={i:A,l:!1,exports:{}};return g[A].call(t.exports,t,t.exports,C),t.l=!0,t.exports}C.m=g,C.c=I,C.d=function(g,I,A){C.o(g,I)||Object.defineProperty(g,I,{enumerable:!0,get:A})},C.r=function(g){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(g,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(g,\"__esModule\",{value:!0})},C.t=function(g,I){if(1&I&&(g=C(g)),8&I)return g;if(4&I&&\"object\"==typeof g&&g&&g.__esModule)return g;var A=Object.create(null);if(C.r(A),Object.defineProperty(A,\"default\",{enumerable:!0,value:g}),2&I&&\"string\"!=typeof g)for(var t in g)C.d(A,t,function(I){return g[I]}.bind(null,t));return A},C.n=function(g){var I=g&&g.__esModule?function(){return g.default}:function(){return g};return C.d(I,\"a\",I),I},C.o=function(g,I){return Object.prototype.hasOwnProperty.call(g,I)},C.p=\"\",C(C.s=0)}([function(module,__webpack_exports__,__webpack_require__){\"use strict\";eval(\"// ESM COMPAT FLAG\\n__webpack_require__.r(__webpack_exports__);\\n\\n// CONCATENATED MODULE: ./src/Coordinates3D.js\\n\\nclass Coordinates3D {\\n    constructor (x=0,y=0,z=0){\\n        this.x=x;\\n        this.y=y;\\n        this.z=z;\\n    }\\n    clone(){\\n        return new Coordinates3D(this.x,this.y,this.z);\\n    }\\n}\\n\\n// CONCATENATED MODULE: ./src/math/Matrix.js\\n\\n\\nclass Matrix_Matrix { \\n      window(data){\\n        let w = new Coordinates3D(data.x,data.y,data.z);\\n        return [\\n          2 / w.x, 0, 0, 0,\\n          0, -2 / w.y, 0, 0,\\n          0, 0, 2 / w.z, 0,   \\n        -1, 1, 0, 1,\\n      ];\\n      }\\n      perspective(data){\\n        let fovInRadians = data.fov * Math.PI/180;\\n        let f = Math.tan(Math.PI * 0.5 - 0.5 * fovInRadians);\\n        let rangeInv = 1.0 / (data.zNear - data.zFar);\\n        let a = f / data.aspect;\\n        let b = (data.zNear + data.zFar) * rangeInv;\\n        let c = data.zNear * data.zFar * rangeInv * 2.0;\\n\\n        return [\\n          a, 0,  0, 0,\\n          0, f, 0, 0,\\n          0, 0,  b, -1,\\n          0, 0,  c, 0,\\n        ];\\n      }\\n      ortographic(data){\\n        let w = data.right - data.left;\\n        let h = data.top - data.bottom;\\n        let d = data.far - data.near;\\n\\n        let tx = -((data.right + data.left)/w);\\n        let ty = -((data.top + data.bottom)/h);\\n        let tz = -((data.far + data.near)/d);\\n        return [\\n          2 / w, 0,     0,      0,\\n          0,     2 / h, 0,      0,\\n          0,     0,     -2 / d, 0,   \\n          tx,    ty,    tz,     1,\\n      ];\\n      }\\n      scale(data){\\n        let s = new Coordinates3D(data.x,data.y,data.z)\\n        return [\\n          s.x,0,0,0,\\n          0,s.y,0,0,\\n          0,0,s.z,0,\\n          0,0,0,1\\n        ];\\n      }\\n      translate(data=0){\\n        let t = new Coordinates3D(data.x,data.y,data.z);\\n        return[\\n          1,0,0,0,\\n          0,1,0,0,\\n          0,0,1,0,\\n          t.x,t.y,t.z,1\\n        ];\\n      }\\n      xRotation(a=0) {\\n        let c = Math.cos(a);\\n        let s = Math.sin(a);\\n        return [\\n          1, 0, 0, 0,\\n          0, c, -s, 0,\\n          0, s, c, 0,\\n          0, 0, 0, 1,\\n        ];\\n      }\\n      yRotation (a=0) {\\n        let c = Math.cos(a);\\n        let s = Math.sin(a);\\n        return [\\n          c, 0, s, 0,\\n          0, 1, 0, 0,\\n          -s, 0, c, 0,\\n          0, 0, 0, 1,\\n        ];\\n      }\\n      zRotation(a=0){\\n        return [\\n          Math.cos(a), -Math.sin(a),    0,    0,\\n          Math.sin(a),  Math.cos(a),    0,    0,\\n               0,       0,    1,    0,\\n               0,       0,    0,    1\\n        ];\\n      }\\n      multiplyMatrixAndPoint(matrix, point) {\\n        // Give a simple variable name to each part of the matrix, a column and row number\\n        let c0r0 = matrix[0], c1r0 = matrix[1], c2r0 = matrix[2], c3r0 = matrix[3];\\n        let c0r1 = matrix[4], c1r1 = matrix[5], c2r1 = matrix[6], c3r1 = matrix[7];\\n        let c0r2 = matrix[8], c1r2 = matrix[9], c2r2 = matrix[10], c3r2 = matrix[11];\\n        let c0r3 = matrix[12], c1r3 = matrix[13], c2r3 = matrix[14], c3r3 = matrix[15];\\n      \\n        // Now set some simple names for the point\\n        let x = point[0];\\n        let y = point[1];\\n        let z = point[2];\\n        let w = point[3];\\n      \\n        // Multiply the point against each part of the 1st column, then add together\\n        let resultX = (x * c0r0) + (y * c0r1) + (z * c0r2) + (w * c0r3);\\n      \\n        // Multiply the point against each part of the 2nd column, then add together\\n        let resultY = (x * c1r0) + (y * c1r1) + (z * c1r2) + (w * c1r3);\\n      \\n        // Multiply the point against each part of the 3rd column, then add together\\n        let resultZ = (x * c2r0) + (y * c2r1) + (z * c2r2) + (w * c2r3);\\n      \\n        // Multiply the point against each part of the 4th column, then add together\\n        let resultW = (x * c3r0) + (y * c3r1) + (z * c3r2) + (w * c3r3);\\n      \\n        return [resultX, resultY, resultZ, resultW];\\n      }\\n      multiply(a,b){\\n        var a00 = a[0 * 4 + 0];\\n        var a01 = a[0 * 4 + 1];\\n        var a02 = a[0 * 4 + 2];\\n        var a03 = a[0 * 4 + 3];\\n        var a10 = a[1 * 4 + 0];\\n        var a11 = a[1 * 4 + 1];\\n        var a12 = a[1 * 4 + 2];\\n        var a13 = a[1 * 4 + 3];\\n        var a20 = a[2 * 4 + 0];\\n        var a21 = a[2 * 4 + 1];\\n        var a22 = a[2 * 4 + 2];\\n        var a23 = a[2 * 4 + 3];\\n        var a30 = a[3 * 4 + 0];\\n        var a31 = a[3 * 4 + 1];\\n        var a32 = a[3 * 4 + 2];\\n        var a33 = a[3 * 4 + 3];\\n        var b00 = b[0 * 4 + 0];\\n        var b01 = b[0 * 4 + 1];\\n        var b02 = b[0 * 4 + 2];\\n        var b03 = b[0 * 4 + 3];\\n        var b10 = b[1 * 4 + 0];\\n        var b11 = b[1 * 4 + 1];\\n        var b12 = b[1 * 4 + 2];\\n        var b13 = b[1 * 4 + 3];\\n        var b20 = b[2 * 4 + 0];\\n        var b21 = b[2 * 4 + 1];\\n        var b22 = b[2 * 4 + 2];\\n        var b23 = b[2 * 4 + 3];\\n        var b30 = b[3 * 4 + 0];\\n        var b31 = b[3 * 4 + 1];\\n        var b32 = b[3 * 4 + 2];\\n        var b33 = b[3 * 4 + 3];\\n        return [\\n          b00 * a00 + b01 * a10 + b02 * a20 + b03 * a30,\\n          b00 * a01 + b01 * a11 + b02 * a21 + b03 * a31,\\n          b00 * a02 + b01 * a12 + b02 * a22 + b03 * a32,\\n          b00 * a03 + b01 * a13 + b02 * a23 + b03 * a33,\\n          b10 * a00 + b11 * a10 + b12 * a20 + b13 * a30,\\n          b10 * a01 + b11 * a11 + b12 * a21 + b13 * a31,\\n          b10 * a02 + b11 * a12 + b12 * a22 + b13 * a32,\\n          b10 * a03 + b11 * a13 + b12 * a23 + b13 * a33,\\n          b20 * a00 + b21 * a10 + b22 * a20 + b23 * a30,\\n          b20 * a01 + b21 * a11 + b22 * a21 + b23 * a31,\\n          b20 * a02 + b21 * a12 + b22 * a22 + b23 * a32,\\n          b20 * a03 + b21 * a13 + b22 * a23 + b23 * a33,\\n          b30 * a00 + b31 * a10 + b32 * a20 + b33 * a30,\\n          b30 * a01 + b31 * a11 + b32 * a21 + b33 * a31,\\n          b30 * a02 + b31 * a12 + b32 * a22 + b33 * a32,\\n          b30 * a03 + b31 * a13 + b32 * a23 + b33 * a33,\\n        ];   \\n      }\\n      invert(a) {\\n      let out = [];\\n      let a00 = a[0],\\n        a01 = a[1],\\n        a02 = a[2],\\n        a03 = a[3];\\n      let a10 = a[4],\\n        a11 = a[5],\\n        a12 = a[6],\\n        a13 = a[7];\\n      let a20 = a[8],\\n        a21 = a[9],\\n        a22 = a[10],\\n        a23 = a[11];\\n      let a30 = a[12],\\n        a31 = a[13],\\n        a32 = a[14],\\n        a33 = a[15];\\n    \\n      let b00 = a00 * a11 - a01 * a10;\\n      let b01 = a00 * a12 - a02 * a10;\\n      let b02 = a00 * a13 - a03 * a10;\\n      let b03 = a01 * a12 - a02 * a11;\\n      let b04 = a01 * a13 - a03 * a11;\\n      let b05 = a02 * a13 - a03 * a12;\\n      let b06 = a20 * a31 - a21 * a30;\\n      let b07 = a20 * a32 - a22 * a30;\\n      let b08 = a20 * a33 - a23 * a30;\\n      let b09 = a21 * a32 - a22 * a31;\\n      let b10 = a21 * a33 - a23 * a31;\\n      let b11 = a22 * a33 - a23 * a32;\\n    \\n      // Calculate the determinant\\n      let det =\\n        b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\\n    \\n      if (!det) {\\n        return null;\\n      }\\n      det = 1.0 / det;\\n    \\n      out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\\n      out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\\n      out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\\n      out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\\n      out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\\n      out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\\n      out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\\n      out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\\n      out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\\n      out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\\n      out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\\n      out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\\n      out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\\n      out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\\n      out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\\n      out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\\n    \\n      return out;\\n      }\\n      transpose(a) {\\n        // If we are transposing ourselves we can skip a few steps but have to cache some values\\n        let out = [];\\n\\n          out[0] = a[0];\\n          out[1] = a[4];\\n          out[2] = a[8];\\n          out[3] = a[12];\\n          out[4] = a[1];\\n          out[5] = a[5];\\n          out[6] = a[9];\\n          out[7] = a[13];\\n          out[8] = a[2];\\n          out[9] = a[6];\\n          out[10] = a[10];\\n          out[11] = a[14];\\n          out[12] = a[3];\\n          out[13] = a[7];\\n          out[14] = a[11];\\n          out[15] = a[15];\\n        \\n      \\n        return out;\\n      }\\n      multiplyToModel(dataPosition,dataScale,dataRotation){\\n        let modelMatrix = this.multiply(this.translate(dataPosition),this.xRotation(dataRotation.x));\\n            modelMatrix = this.multiply(modelMatrix,this.yRotation(dataRotation.y));\\n            modelMatrix = this.multiply(modelMatrix,this.zRotation(dataRotation.z));\\n            modelMatrix = this.multiply(modelMatrix,this.scale(dataScale));\\n        return modelMatrix;\\n      }\\n      invertModelMatrix(dataPosition,dataScale,dataRotation){\\n        return this.invert(this.multiplyToModel(dataPosition,dataScale,dataRotation));\\n      }\\n      normalize(v) {\\n        let dst = [];\\n        let length = Math.sqrt(v[0] * v[0] + v[1] * v[1] + v[2] * v[2]);\\n        // make sure we don't divide by 0.\\n        if (length > 0.00001) {\\n          dst[0] = v[0] / length;\\n          dst[1] = v[1] / length;\\n          dst[2] = v[2] / length;\\n        }\\n        return dst;\\n      }\\n}\\n\\n\\n\\n/*   // another variant create matrix \\n      createOrtographic(data){\\n        let left = data.left;\\n        let right = data.right;\\n        let top = data.top;\\n        let bottom = data.bottom;\\n        let near = data.near;\\n        let far = data.far;\\n\\n        let M = [];\\n\\n        let widthRatio  = 1.0 / (right - left);\\n        let heightRatio = 1.0 / (top - bottom);\\n        let depthRatio  = 1.0 / (far - near);\\n    \\n        let sx = 2 * widthRatio;\\n        let sy = 2 * heightRatio;\\n        let sz = -2 * depthRatio;\\n    \\n        let tx = -(right + left) * widthRatio;\\n        let ty = -(top + bottom) * heightRatio;\\n        let tz = -(far + near) * depthRatio;\\n    \\n        M[0] = sx;  M[4] = 0;   M[8] = 0;   M[12] = tx;\\n        M[1] = 0;   M[5] = sy;  M[9] = 0;   M[13] = ty;\\n        M[2] = 0;   M[6] = 0;   M[10] = sz; M[14] = tz;\\n        M[3] = 0;   M[7] = 0;   M[11] = 0;  M[15] = 1;\\n    \\n        return M;\\n      }\\n      createFrustum(left, right, bottom, top, near, far){\\n        let M = [];\\n        let sx = 2 * near / (right - left);\\n        var sy = 2 * near / (top - bottom);\\n  \\n        let c2 = - (far + near) / (far - near);\\n        let c1 = 2 * near * far / (near - far);\\n\\n        let A = (right + left) / (right - left);\\n        let B = (top + bottom) / (top - bottom);\\n  \\n        let tx = -near * (left + right) / (right - left);\\n        let ty = -near * (bottom + top) / (top - bottom);\\n  \\n        M[0] = sx; M[4] = 0;  M[8] = 0;    M[12] = tx;\\n        M[1] = 0;  M[5] = -sy; M[9] = 0;    M[13] = ty;\\n        M[2] = 0;  M[6] = 0;  M[10] = c2;  M[14] = c1;\\n        M[3] = 0;  M[7] = 0;  M[11] = -1;  M[15] = 0;\\n\\n        return M;\\n      }\\n      createPerspective(data){\\n       let fovy = data.fov;\\n       let aspect = data.aspect;\\n       let near = data.zNear;\\n       let far = data.zFar;\\n       \\n       let half_fovy = (fovy * Math.PI/180) / 2;\\n\\n       let top = near * Math.tan(half_fovy);\\n       let bottom = -top;\\n       let right = top * aspect;\\n       let left = -right;\\n \\n       return this.createFrustum(left, right, bottom, top, near, far);\\n      }\\n\\n*/\\n// CONCATENATED MODULE: ./src/program/ProgramRules.js\\n\\n\\nconst BLACK = [0.0, 0.0, 0.0];\\nconst WHITE = [1.0, 1.0, 1.0];\\nconst RED   = [1.0, 0.0, 0.0];\\nconst GREEN = [0.0, 1.0, 0.0];\\nconst BLUE  = [0.0, 0.0, 1.0];\\nconst YELLOW = [0.6,1.0,0.5];//(60,100%,50%)\\n\\nclass ProgramRules {\\n    constructor (gl,program,atrNames,unifNames){\\n        this.gl = gl;\\n        this.program = program;\\n        this.aNames = atrNames;\\n        this.uNames = unifNames;\\n        this.textAtrUpdt = true;\\n   \\n        this.getAtrLocations(this.gl,this.program,this.aNames);\\n        this.getUnifLocations(this.gl,this.program,this.uNames);\\n        this.createBuffers();\\n    }\\n    clearBuffers(){\\n        for (let key in this.aData){\\n            this.gl.deleteBuffer(this.buffers[key]);\\n        }\\n    }\\n    createBuffers(){\\n        this.buffers = {};\\n        for (let key in this.aData){\\n            this.buffers[key] = this.gl.createBuffer();\\n        }\\n    }\\n    setUniform(modelMatrix,invTrModelMatrix,rules,camera,light){\\n        for (let key in this.uData){\\n            switch (key){\\n                case 'modelMatrix':\\n                    this.gl.uniformMatrix4fv(this.uData[key], false, modelMatrix);\\n                break;\\n                case 'viewMatrix':\\n                    this.gl.uniformMatrix4fv(this.uData[key], false, camera.viewMatrix);\\n                break;\\n                case 'projMatrix':\\n                    this.gl.uniformMatrix4fv(this.uData[key], false, camera.projMatrix);\\n                break;\\n                case 'uSampler':\\n                    // Указываем шейдеру, что мы связали текстуру с текстурным регистром 0\\n                    this.gl.uniform1i(this.uData[key], 0);\\n                break;\\n                case 'v_color':\\n                    this.gl.uniform4fv(this.uData[key], rules.material.data.color);\\n                break;\\n// ------------------------------------------ LIGHT --------------------------------------------\\n                case 'u_ambIntensity': \\n                    this.gl.uniform1f(this.uData[key], light.ambient.intensity);\\n                break;\\n                case 'u_ambLightColor': \\n                    this.gl.uniform3fv(this.uData[key], light.ambient.color);\\n                break;\\n                case 'u_lightColor':  // light color \\n                //console.log(light.source.color);\\n                    this.gl.uniform3fv(this.uData[key], light.source.color);\\n                break;\\n                case 'u_intensity':   // light intensity  \\n                    this.gl.uniform1f(this.uData[key], light.source.intensity);\\n                break;\\n                case 'u_specularInt':   // spec intensity  \\n                //console.log(key);\\n                    this.gl.uniform1f(this.uData[key], light.source.specularInt);\\n                break;\\n                case 'u_specularColor': // specular color \\n                    this.gl.uniform3fv(this.uData[key], light.source.specularColor);//\\n                break;\\n                case 'invTranspModelMatrix':\\n                    this.gl.uniformMatrix4fv(this.uData[key], false, invTrModelMatrix);\\n                break;\\n                case 'u_lightWorldPosition': // position light \\n                    this.gl.uniform3fv(this.uData[key], [light.source.positionLight.x, light.source.positionLight.y, light.source.positionLight.z]); //[0, 0, 200]\\n                break;\\n                case 'u_viewWorldPosition': // position view \\n                    this.gl.uniform3fv(this.uData[key], Object.values(camera.position));\\n                break;\\n                case 'u_shininess':  \\n                    this.gl.uniform1f(this.uData[key], light.source.shiniess);\\n                break;\\n                case 'k_vertex':  \\n                    this.gl.uniform1f(this.uData[key], light.source.k_vertex);\\n                break;\\n\\n            };\\n        }\\n    }\\n    setAttribute(rules){\\n        for (let key in this.aData){\\n            switch (key){\\n                case 'a_normal':\\n                    this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.buffers[key]);\\n                    this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array(rules.geometry.cord.normals),this.gl.STATIC_DRAW);\\n\\n                    this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.buffers[key]);\\n                    this.gl.vertexAttribPointer(this.aData[key], 3, this.gl.FLOAT, false, 0, 0);//gl.vertexAttribPointer(scene.objects[i].progRules.atrLoc[key2], bufSett[k], gl.FLOAT, false, 0, 0);\\n                    this.gl.enableVertexAttribArray(this.aData[key]);\\n                break;\\n                case 'a_position':\\n                    this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.buffers[key]);\\n                    this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array(rules.geometry.cord.vertex),this.gl.STATIC_DRAW);\\n    \\n                    this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.buffers[key]);\\n                    this.gl.vertexAttribPointer(this.aData[key], 3, this.gl.FLOAT, false, 0, 0);//gl.vertexAttribPointer(scene.objects[i].progRules.atrLoc[key2], bufSett[k], gl.FLOAT, false, 0, 0);\\n                    this.gl.enableVertexAttribArray(this.aData[key]);\\n                break;\\n                // case 'a_color':\\n                //     //console.log(material);\\n                //     this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.buffers[key]);\\n                //     this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array(),this.gl.STATIC_DRAW);\\n    \\n                //     //this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.buffers[key]);\\n                //     this.gl.vertexAttribPointer(this.aData[key], 4, this.gl.FLOAT, false, 0, 0);\\n                //     this.gl.enableVertexAttribArray(this.aData[key]);\\n                // break;\\n                case 'aTextureCoord':\\n                    if (this.textAtrUpdt){\\n                        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.buffers[key]);\\n                        this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array(rules.geometry.cord.map),this.gl.STATIC_DRAW);\\n\\n                        this.gl.bindTexture(this.gl.TEXTURE_2D, rules.material.texture);//rules.material.texture\\n    \\n                        // задаём параметры, чтобы можно было отрисовать изображение любого размера\\n                        this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_S, this.gl.CLAMP_TO_EDGE);\\n                        this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_T, this.gl.CLAMP_TO_EDGE);\\n                        this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MIN_FILTER, this.gl.NEAREST);\\n                        this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MAG_FILTER, this.gl.NEAREST);\\n    \\n                            const num = 2;              // каждая координата состоит из 2 значений\\n                            const type = this.gl.FLOAT; // данные в буфере имеют тип 32 bit float\\n                            const normalize = false;    // не нормализуем\\n                            const stride = 0;           // сколько байт между одним набором данных и следующим\\n                            const offset = 0;           // стартовая позиция в байтах внутри набора данных\\n                        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.buffers[key]);\\n                        this.gl.vertexAttribPointer(this.aData[key], num, type, normalize, stride, offset);\\n                        this.gl.enableVertexAttribArray(this.aData[key]);\\n    \\n                        // загружаем изображение в текстуру\\n                        this.gl.texImage2D(this.gl.TEXTURE_2D, 0, this.gl.RGBA, this.gl.RGBA, this.gl.UNSIGNED_BYTE, rules.material.data.map);\\n\\n                        //console.log('a');\\n                    } else {\\n                        //let texture = this.gl.createTexture();\\n                        \\n                        this.gl.activeTexture(this.gl.TEXTURE0);\\n                        this.gl.bindTexture(this.gl.TEXTURE_2D, rules.material.texture);//rules.material.texture\\n                    }\\n                    this.textAtrUpdt = false;\\n  \\n                break;\\n            };\\n        }\\n    }\\n    // updateAttribute(rules){\\n    //     for (let key in this.aData){\\n    //         switch (key){\\n    //             case 'a_normal':\\n    //                  this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.buffers[key]);\\n    //                  this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array(rules.geometry.cord.normals),this.gl.STATIC_DRAW);\\n\\n    //                  this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.buffers[key]);\\n    //                  this.gl.vertexAttribPointer(this.aData[key], 3, this.gl.FLOAT, false, 0, 0);//gl.vertexAttribPointer(scene.objects[i].progRules.atrLoc[key2], bufSett[k], gl.FLOAT, false, 0, 0);\\n    //                  this.gl.enableVertexAttribArray(this.aData[key]);\\n    //             break;\\n    //             case 'a_position':\\n    //                  this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.buffers[key]);\\n    //                  this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array(rules.geometry.cord.vertex),this.gl.STATIC_DRAW);\\n    \\n    //                  this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.buffers[key]);\\n    //                  this.gl.vertexAttribPointer(this.aData[key], 3, this.gl.FLOAT, false, 0, 0);//gl.vertexAttribPointer(scene.objects[i].progRules.atrLoc[key2], bufSett[k], gl.FLOAT, false, 0, 0);\\n    //                  this.gl.enableVertexAttribArray(this.aData[key]);\\n    //             break;\\n    //             // case 'a_color':\\n    //             //     //console.log(material);\\n    //             //     this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.buffers[key]);\\n    //             //     this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array(),this.gl.STATIC_DRAW);\\n    \\n    //             //     //this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.buffers[key]);\\n    //             //     this.gl.vertexAttribPointer(this.aData[key], 4, this.gl.FLOAT, false, 0, 0);\\n    //             //     this.gl.enableVertexAttribArray(this.aData[key]);\\n    //             // break;\\n    //             case 'aTextureCoord':\\n    //                  //this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.buffers[key]);\\n    //                  //this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array(rules.geometry.cord.map),this.gl.STATIC_DRAW);\\n\\n    //                  //this.gl.bindTexture(this.gl.TEXTURE_2D, rules.material.texture);\\n\\n    //                 // //задаём параметры, чтобы можно было отрисовать изображение любого размера\\n    //                 // this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_S, this.gl.CLAMP_TO_EDGE);\\n    //                 // this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_T, this.gl.CLAMP_TO_EDGE);\\n    //                 // this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MIN_FILTER, this.gl.NEAREST);\\n    //                 // this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MAG_FILTER, this.gl.NEAREST);\\n\\n    //                     // const num = 2;              // каждая координата состоит из 2 значений\\n    //                     // const type = this.gl.FLOAT; // данные в буфере имеют тип 32 bit float\\n    //                     // const normalize = false;    // не нормализуем\\n    //                     // const stride = 0;           // сколько байт между одним набором данных и следующим\\n    //                     // const offset = 0;           // стартовая позиция в байтах внутри набора данных\\n    //                 //this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.buffers[key]);\\n    //                 // this.gl.vertexAttribPointer(this.aData[key], num, type, normalize, stride, offset);\\n    //                 // this.gl.enableVertexAttribArray(this.aData[key]);\\n\\n    //                 // // загружаем изображение в текстуру\\n    //                  //this.gl.texImage2D(this.gl.TEXTURE_2D, 0, this.gl.RGBA, this.gl.RGBA, this.gl.UNSIGNED_BYTE, rules.material.data.map);\\n    //             break;\\n    //         };\\n    //     }\\n    // }\\n    getAtrLocations(gl,program,atrNames){\\n        let atrLoc = {};\\n        for (let i=0;i<atrNames.length;i++){\\n            atrLoc[atrNames[i]] = gl.getAttribLocation(program,atrNames[i]);\\n        }\\n        this.aData = atrLoc;\\n    }\\n    getUnifLocations(gl,program,unifNames){\\n        let unifLoc = {};\\n        for (let i=0;i<unifNames.length;i++){\\n            unifLoc[unifNames[i]] = gl.getUniformLocation(program,unifNames[i]);\\n        }\\n        this.uData = unifLoc;\\n    }\\n}\\n\\n// CONCATENATED MODULE: ./src/program/WebGlPrograms.js\\n\\n\\nclass WebGlPrograms_WebGlPrograms {\\n    constructor(gl){\\n        this.gl = gl;\\n    }\\n    compilePr(shadersCode){\\n        let atributes = [];\\n        let uniforms = [];\\n        let program = this.createProgram(shadersCode.vertex,shadersCode.fragment);\\n\\n        const numAttribs = this.gl.getProgramParameter(program, this.gl.ACTIVE_ATTRIBUTES);\\n            for (let i = 0; i < numAttribs; i++) {\\n                atributes[i]=this.gl.getActiveAttrib(program, i).name;\\n            }\\n        const numUniforms = this.gl.getProgramParameter(program, this.gl.ACTIVE_UNIFORMS);\\n            for (let i = 0; i < numUniforms; ++i) {\\n                uniforms[i]=this.gl.getActiveUniform(program, i).name;\\n            }\\n\\n        return  new ProgramRules(this.gl,program,atributes,uniforms);\\n    }\\n    createShaders(type,source){\\n        let shader = this.gl.createShader(type); \\n        this.gl.shaderSource(shader, source);      \\n        this.gl.compileShader(shader);            \\n        if (this.gl.getShaderParameter(shader, this.gl.COMPILE_STATUS)){                        \\n            return shader;\\n        }\\n        else {\\n            console.log(this.gl.getShaderInfoLog(shader));\\n            this.gl.deleteShader(shader);\\n        }\\n    }\\n    createProgram(vertex,fragment){\\n\\n        let program = this.gl.createProgram();\\n        this.gl.attachShader(program, this.createShaders(this.gl.VERTEX_SHADER,vertex));\\n        this.gl.attachShader(program, this.createShaders(this.gl.FRAGMENT_SHADER,fragment));\\n        this.gl.linkProgram(program);\\n        if (this.gl.getProgramParameter(program, this.gl.LINK_STATUS)){\\n          return program; \\n        }\\n        else {\\n            console.log(this.gl.getProgramInfoLog(program));\\n            this.gl.deleteProgram(program);\\n        }\\n    }\\n}\\n\\n\\n\\n/*\\n\\n        if ((camera === undefined)&(mesh.material === undefined)){\\n            vertex = `\\n                attribute vec3 a_position;\\n\\n                uniform mat4 modelMatrix;\\n\\n                varying vec4 und_color;\\n\\n                void main() {\\n                    gl_Position = modelMatrix * vec4(a_position.xyz,1.0); \\n                    und_color = gl_Position * 0.5 + 0.5;\\n                }\\n            `;\\n            fragment = `\\n                precision mediump float;\\n\\n                varying vec4 und_color;\\n\\n                void main() {\\n                    gl_FragColor = und_color;\\n                }\\n            `;\\n            atrNames = ['a_position'];\\n            uniformVarNames =['modelMatrix'];\\n        }\\n        else if ((camera === undefined)&(mesh.material !== undefined)){\\n            vertex = `\\n                attribute vec3 a_position;\\n                attribute vec4 a_color;\\n        \\n                uniform mat4 modelMatrix;\\n        \\n                varying vec4 v_color;\\n        \\n                void main() {\\n                    gl_Position = modelMatrix * vec4(a_position.xyz,1.0);\\n                    v_color = a_color;\\n                }\\n            `;\\n            fragment = mesh.material.getFragmentCode();\\n            atrNames = ['a_position','a_color'];\\n            uniformVarNames =['modelMatrix'];\\n        }\\n        else if ((camera !== undefined)&(mesh.material === undefined)){\\n            vertex = `\\n                attribute vec3 a_position;\\n\\n                uniform mat4 modelMatrix;\\n                uniform mat4 viewMatrix;\\n                uniform mat4 projMatrix;\\n\\n                varying vec4 und_color;\\n\\n                void main() {\\n                    gl_Position = projMatrix * viewMatrix * modelMatrix * vec4(a_position.xyz,1.0);\\n                    und_color = gl_Position * 0.5 + 0.5;\\n                }\\n            `;\\n            fragment = `\\n                precision mediump float;\\n\\n                varying vec4 und_color;\\n\\n                void main() {\\n                    gl_FragColor = und_color;\\n                }\\n            `;\\n            atrNames = ['a_position'];\\n            uniformVarNames = ['modelMatrix','viewMatrix','projMatrix'];\\n        }\\n        else if ((camera !== undefined)&(mesh.material !== undefined)){\\n            vertex = `\\n                attribute vec3 a_position;\\n                attribute vec4 a_color;\\n\\n                uniform mat4 modelMatrix;\\n                uniform mat4 viewMatrix;\\n                uniform mat4 projMatrix;\\n\\n                varying vec4 v_color;\\n\\n                void main() {\\n                    gl_Position = projMatrix * viewMatrix * modelMatrix * vec4(a_position.xyz,1.0); \\n                    v_color = a_color;\\n                }\\n            `;\\n            fragment = mesh.material.getFragmentCode();\\n            atrNames = ['a_position','a_color'];\\n            uniformVarNames = ['modelMatrix','viewMatrix','projMatrix'];\\n        }\\n*/\\n// CONCATENATED MODULE: ./src/material/CoreMaterial.js\\n\\n\\nclass CoreMaterial_CoreMaterial {\\n    constructor (data){\\n        this.type = 'material';\\n        this.data = data;\\n        this.struct = {\\n            color: (this.data.color!==undefined),\\n            map: (this.data.map!==undefined),\\n        }\\n    }\\n    createShadersCode(code){\\n        //let data = Object.entries(this.data);\\n        if (!(this.struct.color||this.struct.map)){\\n                console.log('Add material! Color or/and map like {color:[0.0,0.0,0.0,1.0]}');\\n          } else if (this.struct.color & !this.struct.map){\\n                this.shadersCode = code.color;\\n          } else if (!this.struct.color & this.struct.map){\\n                this.shadersCode = code.map;\\n          } else if (this.struct.color & this.struct.map){\\n                this.shadersCode = code.mapAndColor;\\n          }\\n    }\\n    getProgram(gl){ \\n        return new WebGlPrograms_WebGlPrograms(gl).compilePr(this.shadersCode);\\n    }\\n    makeWebGlDependenseFcn(gl){\\n        if (this.struct.map) this.createTexture(gl);\\n    }\\n    createTexture(gl){\\n        this.texture = gl.createTexture();\\n    }\\n}\\n\\n\\n// CONCATENATED MODULE: ./src/material/BasicMaterial.js\\n\\n\\nconst shadersBasicMaterial = {\\n    color:{\\n        vertex: `\\n        attribute vec3 a_position;\\n    \\n        uniform mat4 modelMatrix;\\n        uniform mat4 viewMatrix;\\n        uniform mat4 projMatrix;\\n    \\n        void main() {\\n            gl_Position = projMatrix * viewMatrix * modelMatrix * vec4(a_position.xyz,1.0); //\\n        }\\n    `,\\n        fragment: `\\n        precision mediump float;\\n    \\n        uniform vec4 v_color;\\n    \\n        void main() {\\n            gl_FragColor = v_color;\\n        }\\n    `,\\n    },\\n    map:{\\n        vertex: `\\n        attribute vec3 a_position;\\n        attribute vec2 aTextureCoord;\\n    \\n        uniform mat4 modelMatrix;\\n        uniform mat4 viewMatrix;\\n        uniform mat4 projMatrix;\\n    \\n        varying highp vec2 vTextureCoord;\\n    \\n        void main() {\\n            gl_Position = projMatrix * viewMatrix * modelMatrix * vec4(a_position.xyz,1.0); //\\n            vTextureCoord = aTextureCoord;\\n        }\\n    `,\\n        fragment: `\\n        precision mediump float;\\n    \\n        varying highp vec2 vTextureCoord;\\n        uniform sampler2D uSampler;\\n    \\n        void main() {\\n            gl_FragColor = texture2D(uSampler, vTextureCoord);\\n        }\\n    `,\\n    },\\n    mapAndColor:{\\n        vertex: `\\n        attribute vec3 a_position;\\n        attribute vec2 aTextureCoord;\\n    \\n        uniform mat4 modelMatrix;\\n        uniform mat4 viewMatrix;\\n        uniform mat4 projMatrix;\\n    \\n        varying highp vec2 vTextureCoord;\\n    \\n        void main() {\\n            gl_Position = projMatrix * viewMatrix * modelMatrix * vec4(a_position.xyz,1.0); //\\n            vTextureCoord = aTextureCoord;\\n        }\\n    `,\\n        fragment: `\\n        precision mediump float;\\n\\n        uniform sampler2D uSampler;\\n        uniform vec4 v_color;\\n\\n        varying highp vec2 vTextureCoord;\\n\\n    \\n        void main() {\\n            highp vec4 texelColor = texture2D(uSampler, vTextureCoord);\\n            gl_FragColor = texelColor * v_color;\\n        }\\n    `,\\n    }\\n};\\n\\nclass BasicMaterial_BasicMaterial extends CoreMaterial_CoreMaterial{\\n    constructor(data){\\n        super(data);\\n        this.createShadersCode(shadersBasicMaterial);\\n    }\\n}\\n\\n\\n// CONCATENATED MODULE: ./src/camera/Camera.js\\n\\n\\n\\nclass Camera_Camera{\\n    constructor(){\\n        this.position = new Coordinates3D();\\n        this.rotation = new Coordinates3D(); \\n        this.scale = new Coordinates3D(1,1,1);\\n        this.ortographicSett = {\\n            right: 0,\\n            left: 0,\\n            top: 0, \\n            bottom: 0, \\n            far: 0,\\n            near: 0,\\n        };\\n        this.perspectiveSett = {\\n            zNear: 0.5,\\n            zFar: 0,\\n            fov: 60,\\n            aspect:0,\\n        };\\n    }\\n    updateCameraMtrx(){\\n        this.viewMatrix = new Matrix_Matrix().invertModelMatrix(this.position,this.scale,this.rotation);\\n        this.ortographicMatrix = new Matrix_Matrix().ortographic(this.ortographicSett);\\n        this.perspectiveMatrix = new Matrix_Matrix().perspective(this.perspectiveSett);\\n        this.projMatrix = this.perspectiveMatrix;\\n    }\\n}\\n\\n\\n// CONCATENATED MODULE: ./src/Mesh.js\\n\\n\\n\\n\\nclass Mesh_Mesh {\\n    constructor(geometry,material){\\n        this.type = 'mesh';\\n        this.position = new Coordinates3D();\\n        this.rotation = new Coordinates3D(); \\n        this.scale = new Coordinates3D(1,1,1);\\n        this.dafaultMaterial = new BasicMaterial_BasicMaterial ({color: [1.0, 1.0, 1.0, 1.0]});\\n        this.createDisplayRules(geometry.getGeometry(),material);\\n        \\n    }\\n    createProgramRules(gl){\\n        for (let k=0;k<this.displayRules.length;k++){\\n            this.displayRules[k].material.progRules = this.displayRules[k].material.getProgram(gl);\\n        }\\n    }\\n    doProgram(gl,camera,light){\\n        for (let k=0;k<this.displayRules.length;k++){\\n            gl.useProgram(this.displayRules[k].material.progRules.program);\\n            this.displayRules[k].material.progRules.setUniform(\\n                this.modelMatrix,\\n                this.invTranspModelMatrix,\\n                this.displayRules[k],\\n                camera,\\n                light);\\n                this.displayRules[k].material.progRules.setAttribute(this.displayRules[k]);\\n            gl.drawArrays(gl.TRIANGLES, 0, this.displayRules[k].geometry.info.numVertex);\\n        }\\n        this.doneSendAttribute  = false;\\n    }\\n    createDisplayRules(geometry,material){\\n        let rules = [];\\n        let newMaterial = this.createMaterial(geometry,material);\\n        for (let i=0;i<geometry.parts.length;i++){\\n            if (this.monoChrome){\\n                rules[i] = {\\n                    material: newMaterial,\\n                    geometry: geometry.parts[i]\\n                };\\n            } else {\\n                rules[i] = {\\n                    material: newMaterial[i],\\n                    geometry: geometry.parts[i]\\n                };\\n            }\\n        }\\n        this.displayRules = rules;\\n    }\\n    createMaterial(geometry,material){\\n        let newMaterial = [];\\n        let isMaterialArray = Array.isArray(material);\\n        this.monoChrome = !isMaterialArray;\\n        if (isMaterialArray){\\n            for (let i=0;i<geometry.parts.length;i++){\\n                if(material[i]!==undefined){\\n                    newMaterial[i]=material[i];\\n                } else {\\n                    newMaterial[i] = this.dafaultMaterial;\\n                } \\n            }\\n        } else newMaterial = material;\\n\\n        return newMaterial;\\n    }\\n    updateMeshMatrix(){ \\n        this.modelMatrix = new Matrix_Matrix().multiplyToModel(this.position,this.scale,this.rotation);\\n        this.invTranspModelMatrix = new Matrix_Matrix().invert(new Matrix_Matrix().transpose(this.modelMatrix));\\n    }\\n}\\n\\n\\n\\n\\n// CONCATENATED MODULE: ./src/geometry/CoreGeometry.js\\n\\nclass CoreGeometry {\\n    constructor(){\\n        this.partsGeometry = [];\\n    }\\n    createGeometry (type,cordVertex,cordMap,cordNormals){\\n        return {\\n            type: type,\\n            cord:{\\n                vertex: cordVertex,\\n                map: cordMap,\\n                normals: cordNormals\\n            },\\n            info:{\\n                numVertex: cordVertex.length/3,\\n            }\\n        };\\n    }\\n    createSolidGeometry(){\\n        let vertexCord = [];\\n        let mapCord = [];\\n        let normals = [];\\n        let numVertex = 0;\\n        for (let i=0;i<this.partsGeometry.length;i++){\\n            vertexCord = vertexCord.concat(this.partsGeometry[i].cord.vertex);\\n            mapCord = mapCord.concat(this.partsGeometry[i].cord.map);\\n            normals = mapCord.concat(this.partsGeometry[i].cord.normals);\\n            numVertex += this.partsGeometry[i].info.numVertex;\\n        } \\n        this.solidGeometry = this.createGeometry('solid',vertexCord,mapCord,normals,numVertex);\\n        this.solidGeometry.info.numParts = this.partsGeometry.length;\\n        return this.solidGeometry;\\n    }\\n    getGeometry(){\\n        return {\\n            parts: this.createVertex(),\\n        };\\n    }\\n    createVertex(){}\\n}\\n\\n\\n// CONCATENATED MODULE: ./src/geometry/RectangularGeometry.js\\n\\n\\n\\n\\nclass RectangularGeometry_RectangularGeometry {\\n    constructor(w,h,x,y,z){\\n      this.start = new Coordinates3D(x,y,z);\\n      this.w = w;\\n      this.h = h;\\n      this.createVertex();\\n    }\\n    createVertex(){\\n        let x0 = this.start.x;\\n        let x1 = x0+ this.w;\\n        let y0 = this.start.y;\\n        let y1 = y0+this.h; \\n        let z0 = this.start.z;\\n\\n        let vertex =  [\\n            x0,y0,z0,\\n            x1,y0,z0,\\n            x0,y1,z0,\\n      \\n            x0,y1,z0,\\n            x1,y0,z0,\\n            x1,y1,z0,\\n        ];\\n        this.cord = vertex;\\n        this.numVertex = vertex.length / 3;\\n        //this.offsetBytes = vertex.length * 4;\\n        this.numFaces = 1;\\n    }\\n\\n}\\n\\n\\n\\n// CONCATENATED MODULE: ./src/Scene.js\\n\\n\\nclass Scene_Scene {\\n    constructor(){\\n        this.meshs = [];\\n        this.lights = [];\\n        this.background = [0.0, 0.0, 0.0, 1.0];\\n        this.needUpdate = false;\\n    }\\n    createLightRules (){\\n\\n        let rules = {};\\n        for (let i=0;i<this.lights.length;i++){\\n            if (this.lights[i].typeLight=='ambient'){\\n                rules.ambient = this.lights[i].createDataToWebgl();\\n            }else {\\n                rules.source = this.lights[i].createDataToWebgl();\\n            }\\n        }\\n        if (rules['ambient'] == undefined){\\n            rules['ambient'] = {\\n                color: [0.0,0.0,0.0],\\n                intensity: 0.0,\\n            };\\n        } \\n        if (rules['source'] == undefined){\\n            rules['source']= {\\n                color: [0.0,0.0,0.0],\\n                intensity: 0,\\n                positionLight: new Coordinates3D(),\\n                shiniess: 0.0,\\n                specularColor: [0.0,0.0,0.0],\\n                specularInt: 0.0,\\n                k_vertex: 1.0,\\n            };\\n        }\\n        this.lightRules = rules;\\n        //console.log(rules);\\n    }\\n    add(object){\\n        if (object.type == 'mesh'){\\n            this.meshs = this.meshs.concat(object);\\n        } else if (object.type == 'light') {\\n            this.lights = this.lights.concat(object);\\n        }\\n        this.needUpdate = true;\\n    }\\n    update(gl){\\n        if (this.needUpdate){ \\n            for (let i=0;i<this.meshs.length;i++){\\n                for (let k=0;k<this.meshs[i].displayRules.length;k++){\\n                    this.meshs[i].createProgramRules(gl);\\n                    this.meshs[i].displayRules[k].material.makeWebGlDependenseFcn(gl);\\n                }\\n                console.log(this.meshs[i]);\\n            }\\n            if (this.lights.length>0){\\n                this.createLightRules();\\n            }\\n            console.log(this.lightRules);\\n            this.needUpdate = false;\\n        }\\n        for (let i=0;i<this.meshs.length;i++){\\n            this.meshs[i].updateMeshMatrix();\\n        }\\n    }\\n    useProgram(gl,camera){\\n        for (let i=0;i<this.meshs.length;i++){\\n            this.meshs[i].doProgram(gl,camera,this.lightRules);\\n        }\\n    }\\n}\\n\\n\\n// CONCATENATED MODULE: ./src/geometry/TriangleGeometry.js\\n\\n\\n\\nclass TriangleGeometry_TriangleGeometry {\\n    constructor(w,h,x,y,z){\\n      this.start = new Coordinates3D(x,y,z);\\n      \\n      this.w = w;\\n      this.h = h;\\n      this.createVertex();\\n    }\\n    createVertex(){\\n        let x0 = this.start.x;\\n        let y0 = this.start.y;\\n        let z0 = this.start.z;\\n\\n        let x1 = x0 + this.w;\\n        let x2 = x0 - this.w;\\n        let y1 = y0 + this.h; \\n\\n        let vertex =  [\\n            x0,y0,z0,\\n            x2,y1,z0,\\n            x1,y1,z0\\n        ];\\n        this.cord = vertex;\\n        this.numVertex = vertex.length / 3;\\n        this.numPoints = 3;\\n        this.offsetBytes = vertex.length * 4;\\n        this.numEdges = 1;\\n    }\\n}\\n\\n\\n// CONCATENATED MODULE: ./src/WebGlRender.js\\n\\nclass WebGlRender {\\n    constructor (canvas){\\n        this.canvas = canvas;\\n        this.getContext();\\n    }\\n    render(scene,camera){\\n        this.clearScreen(scene.background);\\n        this.update(scene,camera);\\n        this.draw(scene,camera);\\n    }\\n    update(scene,camera){\\n        scene.update(this.gl);\\n        camera.updateCameraMtrx();\\n    }\\n    draw(scene,camera){\\n        scene.useProgram(this.gl,camera);\\n    }\\n    clearScreen(background){\\n        this.gl.viewport(0, 0, this.canvas.width, this.canvas.height);\\n        this.gl.clearColor(background[0],\\n                           background[1],\\n                           background[2],\\n                           background[3]);  // Clear to black, fully opaque //(0.0, 0.0, 0.0, 1.0)\\n        this.gl.clearDepth(1.0);                 // Clear everything\\n        this.gl.enable(this.gl.DEPTH_TEST);           // Enable depth testing\\n        //this.gl.enable(this.gl.CULL_FACE);\\n        this.gl.depthFunc(this.gl.LEQUAL);            // Near things obscure far things\\n        this.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT);\\n    }\\n    getContext(){\\n        this.gl = this.canvas.getContext('webgl');\\n    }\\n}\\n\\n\\n// CONCATENATED MODULE: ./src/geometry/BoxGeometry.js\\n\\n\\n\\n\\nclass BoxGeometry_BoxGeometry extends CoreGeometry{\\n    constructor (w,h,d,x,y,z){\\n        super();\\n        this.w = w;\\n        this.h = h;\\n        this.d = d;\\n        this.start = new Coordinates3D(x,y,z);\\n        //this.createVertex();\\n    }\\n    createVertex(){\\n        let vertex = [];\\n        let frontRect = new RectangularGeometry_RectangularGeometry(this.w,this.h,this.start.x,this.start.y,this.d/2);\\n        let backRect = new RectangularGeometry_RectangularGeometry(this.w,this.h,this.start.x,this.start.y,-(this.d/2));\\n\\n//--------------- TOP -----------------------------\\n        let topX0 = frontRect.cord[0];\\n        let topY0 = frontRect.cord[1];\\n        let topZ0 = frontRect.cord[2];\\n\\n        let topX1 = frontRect.cord[3];\\n        let topY1 = frontRect.cord[4];\\n        let topZ1 = frontRect.cord[5];  \\n\\n        let topX2 = backRect.cord[0];\\n        let topY2 = backRect.cord[1];\\n        let topZ2 = backRect.cord[2];\\n//----------------------------------------------------\\n        let topX3 = backRect.cord[3];\\n        let topY3 = backRect.cord[4];\\n        let topZ3 = backRect.cord[5];\\n\\n        let topVertex =  [\\n            topX0,topY0,topZ0,\\n            topX1,topY1,topZ1,\\n            topX2,topY2,topZ2,\\n      \\n            topX2,topY2,topZ2,\\n            topX1,topY1,topZ1,\\n            topX3,topY3,topZ3,\\n        ];\\n//--------------- Bottom -----------------------------\\n        let bottomX0 = frontRect.cord[9];\\n        let bottomY0 = frontRect.cord[10];\\n        let bottomZ0 = frontRect.cord[11];\\n\\n        let bottomX1 = frontRect.cord[15];\\n        let bottomY1 = frontRect.cord[16];\\n        let bottomZ1 = frontRect.cord[17];  \\n\\n        let bottomX2 = backRect.cord[9];\\n        let bottomY2 = backRect.cord[10];\\n        let bottomZ2 = backRect.cord[11];\\n//----------------------------------------------------\\n        let bottomX3 = backRect.cord[15];\\n        let bottomY3 = backRect.cord[16];\\n        let bottomZ3 = backRect.cord[17];\\n\\n        let bottomVertex =  [\\n            bottomX0,bottomY0,bottomZ0,\\n            bottomX1,bottomY1,bottomZ1,\\n            bottomX2,bottomY2,bottomZ2,\\n\\n            bottomX2,bottomY2,bottomZ2,\\n            bottomX1,bottomY1,bottomZ1,\\n            bottomX3,bottomY3,bottomZ3,\\n        ];\\n        let leftVertex =  [\\n            topX0,topY0,topZ0,\\n            topX2,topY2,topZ2,\\n            bottomX0,bottomY0,bottomZ0,\\n\\n            bottomX0,bottomY0,bottomZ0,\\n            topX2,topY2,topZ2,\\n            bottomX2,bottomY2,bottomZ2,\\n        ];\\n        let rightVertex =  [\\n            topX1,topY1,topZ1,\\n            topX3,topY3,topZ3,\\n            bottomX1,bottomY1,bottomZ1,\\n\\n            bottomX1,bottomY1,bottomZ1,\\n            topX3,topY3,topZ3,\\n            bottomX3,bottomY3,bottomZ3,\\n        ];\\n\\n        const mapCord2D = [\\n            0.0,  0.0,\\n            1.0,  0.0,\\n            0.0,  1.0,\\n            0.0,  1.0,\\n            1.0,  0.0,\\n            1.0,  1.0 \\n        ];\\n        const frontNormals = [\\n            0.0,  0.0,  1.0,\\n            0.0,  0.0,  1.0,\\n            0.0,  0.0,  1.0,\\n\\n            0.0,  0.0,  1.0,\\n            0.0,  0.0,  1.0,\\n            0.0,  0.0,  1.0,\\n        ];\\n        const backNormals = [\\n            0.0,  0.0, -1.0,\\n            0.0,  0.0, -1.0,\\n            0.0,  0.0, -1.0,\\n\\n            0.0,  0.0, -1.0,\\n            0.0,  0.0, -1.0,\\n            0.0,  0.0, -1.0,\\n        ];\\n        const topNormals = [\\n            0.0,  -1.0,  0.0,\\n            0.0,  -1.0,  0.0,\\n            0.0,  -1.0,  0.0,\\n\\n            0.0,  -1.0,  0.0,\\n            0.0,  -1.0,  0.0,\\n            0.0,  -1.0,  0.0,\\n        ];\\n        const bottomNormals = [\\n            0.0, 1.0,  0.0,\\n            0.0, 1.0,  0.0,\\n            0.0, 1.0,  0.0,\\n\\n            0.0, 1.0,  0.0,\\n            0.0, 1.0,  0.0,\\n            0.0, 1.0,  0.0,\\n        ];\\n        const leftNormals = [\\n            -1.0,  0.0,  0.0,\\n            -1.0,  0.0,  0.0,\\n            -1.0,  0.0,  0.0,\\n\\n            -1.0,  0.0,  0.0,\\n            -1.0,  0.0,  0.0,\\n            -1.0,  0.0,  0.0,\\n        ];\\n        const rightNormals = [\\n            1.0,  0.0,  0.0,\\n            1.0,  0.0,  0.0,\\n            1.0,  0.0,  0.0,\\n\\n            1.0,  0.0,  0.0,\\n            1.0,  0.0,  0.0,\\n            1.0,  0.0,  0.0,\\n        ];\\n\\n        this.partsGeometry = [\\n            this.createGeometry('part',frontRect.cord,mapCord2D,frontNormals),\\n            this.createGeometry('part',backRect.cord,mapCord2D,backNormals),\\n            this.createGeometry('part',topVertex,mapCord2D,topNormals),\\n            this.createGeometry('part',bottomVertex,mapCord2D,bottomNormals),\\n            this.createGeometry('part',leftVertex,mapCord2D,leftNormals),\\n            this.createGeometry('part',rightVertex,mapCord2D,rightNormals),\\n        ];\\n\\n        //vertex = vertex.concat(frontRect.cord,backRect.cord,topVertex,bottomVertex,leftVertex,rightVertex);\\n        return this.partsGeometry;\\n    }\\n}\\n\\n\\n// CONCATENATED MODULE: ./src/material/Material.js\\n\\n\\nclass Material_Material {\\n    constructor(type){\\n        this.type = type;\\n        this.needUpdate = true;\\n    }\\n    getProgram(gl){\\n        return new WebGlPrograms_WebGlPrograms(gl).compilePr(this.vertex,this.fragment);\\n    }\\n    update(){}\\n    makeWebGlDependenseFcn(){}\\n}\\n\\n// CONCATENATED MODULE: ./src/material/TextureMaterial.js\\n\\n\\nconst vertexTextureMaterial = `\\n    attribute vec3 a_position;\\n    attribute vec2 aTextureCoord;\\n\\n    uniform mat4 modelMatrix;\\n    uniform mat4 viewMatrix;\\n    uniform mat4 projMatrix;\\n\\n    varying highp vec2 vTextureCoord;\\n\\n    void main() {\\n        gl_Position = projMatrix * viewMatrix * modelMatrix * vec4(a_position.xyz,1.0); //\\n        vTextureCoord = aTextureCoord;\\n    }\\n`;\\nconst fragmentTextureMaterial = `\\n    precision mediump float;\\n\\n    varying highp vec2 vTextureCoord;\\n    uniform sampler2D uSampler;\\n\\n    void main() {\\n        gl_FragColor = texture2D(uSampler, vTextureCoord);\\n    }\\n`;\\n\\nclass TextureMaterial_TextureMaterial extends Material_Material {\\n    constructor(image){\\n        super('texture2D');\\n        this.image = image;\\n        this.vertex = vertexTextureMaterial;\\n        this.fragment = fragmentTextureMaterial;\\n    }\\n    makeWebGlDependenseFcn(gl){\\n        this.createTexture(gl);\\n    }\\n    createTexture(gl){\\n        this.texture = gl.createTexture();\\n    }\\n    update(dataGeom){\\n        let arr = [];\\n        let cord = [\\n            0.0,  0.0,\\n            1.0,  0.0,\\n            0.0,  1.0,\\n            0.0,  1.0,\\n            1.0,  0.0,\\n            1.0,  1.0 ];\\n        for (let i = 0; i<dataGeom.numEdges;i++){\\n            arr = arr.concat(cord);\\n        } \\n        this.textureCord = arr;\\n    }\\n}\\n\\n\\n// CONCATENATED MODULE: ./src/material/GradientMaterial.js\\n\\n\\nconst vertexGradientMaterial = `\\n    attribute vec3 a_position;\\n\\n    uniform mat4 modelMatrix;\\n    uniform mat4 viewMatrix;\\n    uniform mat4 projMatrix;\\n\\n    varying vec4 v_color;\\n\\n    void main() {\\n        gl_Position = projMatrix * viewMatrix * modelMatrix * vec4(a_position.xyz,1.0); //\\n        v_color = gl_Position * 0.5 + 0.5;\\n    }\\n`;\\nconst fragmentGradientMaterial = `\\n    precision mediump float;\\n\\n    varying vec4 v_color;\\n\\n    void main() {\\n        gl_FragColor = v_color;\\n    }\\n`;\\n\\nclass GradientMaterial_GradientMaterial extends Material_Material{\\n    constructor(){\\n        super('gradient');\\n        this.vertex = vertexGradientMaterial;\\n        this.fragment = fragmentGradientMaterial;\\n    }\\n}\\n\\n\\n// CONCATENATED MODULE: ./src/material/MonochromeColor.js\\n\\n\\nconst vertexMonoColorMaterial = `\\n    attribute vec3 a_position;\\n\\n    uniform mat4 modelMatrix;\\n    uniform mat4 viewMatrix;\\n    uniform mat4 projMatrix;\\n\\n    void main() {\\n        gl_Position = projMatrix * viewMatrix * modelMatrix * vec4(a_position.xyz,1.0); //\\n    }\\n`;\\nconst fragmentMonoColorMaterial = `\\n    precision mediump float;\\n\\n    uniform vec4 color;\\n\\n    void main() {\\n        gl_FragColor = color;\\n    }\\n`;\\n\\nclass MonochromeColor_MonochromeColor extends Material_Material {\\n    constructor (color){\\n        super('monoColor');\\n        this.color = color;\\n        this.vertex = vertexMonoColorMaterial;\\n        this.fragment = fragmentMonoColorMaterial;\\n    }\\n\\n}\\n\\n\\n// CONCATENATED MODULE: ./src/material/PhongMaterial.js\\n\\n\\nconst shadersPhongMaterial = {\\n    color:{\\n        vertex: `\\n        attribute vec3 a_position;\\n        attribute vec3 a_normal;\\n\\n        uniform mat4 modelMatrix;\\n        uniform mat4 viewMatrix;\\n        uniform mat4 projMatrix;\\n\\n        uniform mat4 invTranspModelMatrix;\\n\\n        varying vec3 world_Vertex;\\n        varying vec3 world_Normal;\\n\\n    \\n        void main() {\\n            gl_Position = projMatrix * viewMatrix * modelMatrix * vec4(a_position.xyz,1.0);\\n\\n            world_Vertex = mat3(invTranspModelMatrix) * a_position; \\n            world_Normal = mat3(invTranspModelMatrix) * a_normal; \\n        }\\n    `,\\n        fragment: `\\n        precision highp float;\\n    \\n        uniform vec4 v_color;\\n\\n        uniform float k_vertex;\\n\\n        uniform float u_ambIntensity;\\n        uniform vec3 u_ambLightColor;\\n\\n        uniform float u_intensity;\\n        uniform vec3 u_lightColor;\\n\\n        uniform float u_shininess;\\n\\n        uniform vec3 u_specularColor;\\n        uniform float u_specularInt;\\n\\n        uniform vec3 u_lightWorldPosition;\\n        uniform vec3 u_viewWorldPosition;\\n\\n        varying vec3 world_Vertex;\\n        varying vec3 world_Normal;\\n\\n        vec3 ambient_color;\\n        vec3 diffuse_color;\\n        vec3 specular_color;\\n\\n        vec3 color;\\n\\n        void main() {\\n            ambient_color = u_ambLightColor * u_ambIntensity; // фоновое освещение 1 на всю сцену\\n\\n                vec3 normal = normalize(world_Normal);\\n                float k = clamp(k_vertex, 0.0, 1.0);\\n\\n                vec3 to_light = u_lightWorldPosition - k * world_Vertex;\\n                to_light = normalize(to_light);\\n\\n                float cos_angle = dot(normal,to_light); \\n                cos_angle = clamp(cos_angle, 0.0, 1.0);\\n\\n            diffuse_color = cos_angle * u_lightColor * u_intensity;  \\n\\n                vec3 to_View = u_viewWorldPosition -  k * world_Vertex;\\n                to_View = normalize(to_View);\\n\\n                vec3 halfVector = normalize(to_View + to_light);\\n\\n            specular_color = (pow(dot(normal, halfVector), u_shininess) * u_specularColor) * u_specularInt;\\n                    \\n            color =  ambient_color; \\n            color += v_color.rgb * diffuse_color;\\n            color += specular_color;\\n\\n            gl_FragColor = vec4(color,v_color.a);//vec3(specularInt,specularInt,specularInt)\\n        }\\n    `,\\n    },\\n    map:{\\n        vertex: `\\n        attribute vec3 a_position;\\n        attribute vec2 aTextureCoord;\\n        attribute vec3 a_normal;\\n    \\n        uniform mat4 modelMatrix;\\n        uniform mat4 viewMatrix;\\n        uniform mat4 projMatrix;\\n\\n        uniform mat4 invTranspModelMatrix;\\n    \\n        varying highp vec2 vTextureCoord;\\n\\n        varying vec3 world_Vertex;\\n        varying vec3 world_Normal;\\n    \\n        void main() {\\n            gl_Position = projMatrix * viewMatrix * modelMatrix * vec4(a_position.xyz,1.0);\\n            vTextureCoord = aTextureCoord;\\n            world_Vertex = mat3(invTranspModelMatrix) * a_position; \\n            world_Normal = mat3(invTranspModelMatrix) * a_normal;\\n        }\\n    `,\\n        fragment: `\\n        precision mediump float;\\n\\n        uniform sampler2D uSampler;\\n\\n        varying highp vec2 vTextureCoord;\\n\\n        uniform float k_vertex;\\n\\n        uniform float u_ambIntensity;\\n        uniform vec3 u_ambLightColor;\\n\\n        uniform float u_intensity;\\n        uniform vec3 u_lightColor;\\n\\n        uniform float u_shininess;\\n\\n        uniform vec3 u_specularColor;\\n        uniform float u_specularInt;\\n\\n        uniform vec3 u_lightWorldPosition;\\n        uniform vec3 u_viewWorldPosition;\\n\\n        varying vec3 world_Vertex;\\n        varying vec3 world_Normal;\\n\\n        vec3 ambient_color;\\n        vec3 diffuse_color;\\n        vec3 specular_color;\\n\\n        vec3 color;\\n    \\n        void main() {\\n\\n            ambient_color = u_ambLightColor * u_ambIntensity; // фоновое освещение 1 на всю сцену\\n\\n                vec3 normal = normalize(world_Normal);\\n                float k = clamp(k_vertex, 0.0, 1.0);\\n\\n                vec3 to_light = u_lightWorldPosition - k * world_Vertex;\\n                to_light = normalize(to_light);\\n\\n                float cos_angle = dot(normal,to_light); \\n                cos_angle = clamp(cos_angle, 0.0, 1.0);\\n\\n            diffuse_color = cos_angle * u_lightColor * u_intensity;  \\n\\n                vec3 to_View = u_viewWorldPosition -  k * world_Vertex;\\n                to_View = normalize(to_View);\\n\\n                vec3 halfVector = normalize(to_View + to_light);\\n\\n            specular_color = (pow(dot(normal, halfVector), u_shininess) * u_specularColor) * u_specularInt;\\n\\n            highp vec4 texelColor = texture2D(uSampler, vTextureCoord);\\n                    \\n            color = ambient_color; \\n            color += texelColor.rgb * diffuse_color; // \\n            color += specular_color;\\n\\n            gl_FragColor = vec4(color, texelColor.a);\\n        }\\n    `,\\n    },\\n    mapAndColor:{\\n        vertex: `\\n        attribute vec3 a_position;\\n        attribute vec2 aTextureCoord;\\n        attribute vec3 a_normal;\\n    \\n        uniform mat4 modelMatrix;\\n        uniform mat4 viewMatrix;\\n        uniform mat4 projMatrix;\\n\\n        uniform mat4 invTranspModelMatrix;\\n    \\n        varying highp vec2 vTextureCoord;\\n\\n        varying vec3 world_Vertex;\\n        varying vec3 world_Normal;\\n    \\n        void main() {\\n            gl_Position = projMatrix * viewMatrix * modelMatrix * vec4(a_position.xyz,1.0);\\n            vTextureCoord = aTextureCoord;\\n            world_Vertex = mat3(invTranspModelMatrix) * a_position; \\n            world_Normal = mat3(invTranspModelMatrix) * a_normal;\\n        }\\n    `,\\n        fragment: `\\n        precision mediump float;\\n\\n        uniform vec4 v_color;\\n\\n        uniform sampler2D uSampler;\\n\\n        varying highp vec2 vTextureCoord;\\n\\n        uniform float k_vertex;\\n\\n        uniform float u_ambIntensity;\\n        uniform vec3 u_ambLightColor;\\n\\n        uniform float u_intensity;\\n        uniform vec3 u_lightColor;\\n\\n        uniform float u_shininess;\\n\\n        uniform vec3 u_specularColor;\\n        uniform float u_specularInt;\\n\\n        uniform vec3 u_lightWorldPosition;\\n        uniform vec3 u_viewWorldPosition;\\n\\n        varying vec3 world_Vertex;\\n        varying vec3 world_Normal;\\n\\n        vec3 ambient_color;\\n        vec3 diffuse_color;\\n        vec3 specular_color;\\n\\n        vec3 color;\\n    \\n        void main() {\\n\\n            ambient_color = u_ambLightColor * u_ambIntensity; // фоновое освещение 1 на всю сцену\\n\\n                vec3 normal = normalize(world_Normal);\\n                float k = clamp(k_vertex, 0.0, 1.0);\\n\\n                vec3 to_light = u_lightWorldPosition - k * world_Vertex;\\n                to_light = normalize(to_light);\\n\\n                float cos_angle = dot(normal,to_light); \\n                cos_angle = clamp(cos_angle, 0.0, 1.0);\\n\\n            diffuse_color = cos_angle * u_lightColor * u_intensity;  \\n\\n                vec3 to_View = u_viewWorldPosition -  k * world_Vertex;\\n                to_View = normalize(to_View);\\n\\n                vec3 halfVector = normalize(to_View + to_light);\\n\\n            specular_color = (pow(dot(normal, halfVector), u_shininess) * u_specularColor) * u_specularInt;\\n\\n            highp vec4 texelColor = texture2D(uSampler, vTextureCoord);\\n            texelColor *= v_color;\\n            color = ambient_color; \\n            color += texelColor.rgb * diffuse_color; // \\n            color += specular_color;\\n\\n            gl_FragColor = vec4(color, texelColor.a);\\n        }\\n    `,\\n    },\\n};\\n\\nclass PhongMaterial_PhongMaterial extends CoreMaterial_CoreMaterial{\\n    constructor(data){\\n        super(data);\\n        this.createShadersCode(shadersPhongMaterial);\\n    }\\n}\\n\\n\\n/*\\n // программа есть не один источник света \\n\\n            // light_color = vec3(0);\\n            // для каждого источника света light_color += \\n                //cos_angle[текущего источника] * u_lightColor[текущего источника] * u_intensity[текущего источника];\\n            // specular = СУММ(specular_light[текущего источника]);\\n            //rslt = ambient_color =(u_lightColor * u_intensity);\\n            // rslt += v_color.rgb * light_color;\\n            // rslt += specular;\\n\\n\\n\\n    // specular вариант вычисления \\n                    reflection = 2.0 * cos_angle * normal - to_light;\\n                reflection = normalize(reflection);\\n                \\n                to_camera = -1.0 * v_Vertex;\\n                to_camera = normalize(to_camera);\\n\\n                cos_angle = dot(reflection, to_camera);\\n                cos_angle = clamp(cos_angle, 0.0, 1.0);\\n                cos_angle = pow(cos_angle, u_shininess);\\n\\n                if (cos_angle > 0.0) {\\n                    specular_color = u_lightColor * cos_angle;\\n                    diffuse_color = diffuse_color * (1.0 - cos_angle);\\n                  } else {\\n                    specular_color = vec3(0.0, 0.0, 0.0);\\n                  }\\n*/\\n\\n/*\\nconst shadersPhongMaterial = {\\n    color:{\\n        vertex: `\\n        attribute vec3 a_position;\\n        attribute vec3 a_normal;\\n    \\n        uniform vec3 u_lightWorldPosition;\\n        uniform vec3 u_viewWorldPosition;\\n        uniform mat4 modelMatrix;\\n        uniform mat4 invTranspModelMatrix;\\n        uniform mat4 viewMatrix;\\n        uniform mat4 projMatrix;\\n\\n        varying vec3 v_normal;\\n        varying vec3 v_surfaceToLight;\\n        varying vec3 v_surfaceToView;\\n    \\n        void main() {\\n            gl_Position = projMatrix * viewMatrix * modelMatrix * vec4(a_position.xyz,1.0); \\n\\n            v_normal =  mat3(invTranspModelMatrix) * a_normal;\\n            vec3 surfaceWorldPosition = mat3(modelMatrix) * a_position.xyz;\\n            v_surfaceToLight = u_lightWorldPosition - surfaceWorldPosition;\\n            v_surfaceToView = u_viewWorldPosition - surfaceWorldPosition;\\n        }\\n    `,\\n        fragment: `\\n        precision mediump float;\\n    \\n        uniform vec4 v_color;\\n        uniform vec3 u_reverseLightDirection;\\n        uniform float u_shininess;\\n\\n        uniform vec3 u_lightColor;\\n        uniform vec3 u_specularColor;\\n\\n        varying vec3 v_normal;\\n        varying vec3 v_surfaceToLight;\\n        varying vec3 v_surfaceToView;\\n\\n        void main() {\\n            vec3 normal = normalize(v_normal);\\n            vec3 surfaceToLightDirection = normalize(v_surfaceToLight);\\n            vec3 surfaceToViewDirection = normalize(v_surfaceToView);\\n            vec3 halfVector = normalize(surfaceToLightDirection + surfaceToViewDirection);\\n\\n            //float light = dot(normal, u_reverseLightDirection);\\n            float light = dot(normal, surfaceToLightDirection);\\n            float specular = 0.0;\\n            \\n            if (light > 0.0) {\\n              specular = pow(dot(normal, halfVector), u_shininess);\\n            }\\n\\n            gl_FragColor = v_color;\\n            gl_FragColor.rgb *=  light * u_lightColor;\\n            gl_FragColor.rgb += specular * u_specularColor;\\n        }\\n    `,\\n    },\\n    map:{\\n        vertex: `\\n        attribute vec3 a_position;\\n        attribute vec2 aTextureCoord;\\n        attribute vec3 aVertexNormal;\\n    \\n        uniform mat4 modelMatrix;\\n        uniform mat4 viewMatrix;\\n        uniform mat4 projMatrix;\\n        uniform mat4 uNormalMatrix;\\n    \\n        varying highp vec2 vTextureCoord;\\n        varying highp vec3 vLighting;\\n    \\n        void main() {\\n            gl_Position = projMatrix * viewMatrix * modelMatrix * vec4(a_position.xyz,1.0); //\\n            vTextureCoord = aTextureCoord;\\n            highp vec3 ambientLight = vec3(0.3, 0.3, 0.3);\\n            highp vec3 directionalLightColor = vec3(1, 1, 1);\\n            highp vec3 directionalVector = normalize(vec3(0.85, 0.8, 0.75));\\n      \\n            highp vec4 transformedNormal = uNormalMatrix * vec4(aVertexNormal, 1.0);\\n      \\n            highp float directional = max(dot(transformedNormal.xyz, directionalVector), 0.0);\\n            vLighting = ambientLight + (directionalLightColor * directional);\\n        }\\n    `,\\n        fragment: `\\n        precision mediump float;\\n\\n        uniform sampler2D uSampler;\\n\\n        varying highp vec3 vLighting;\\n        varying highp vec2 vTextureCoord;\\n\\n    \\n        void main() {\\n            highp vec4 texelColor = texture2D(uSampler, vTextureCoord);\\n            gl_FragColor = vec4(texelColor.rgb * vLighting, texelColor.a);\\n        }\\n    `,\\n    },\\n    mapAndColor:{\\n        vertex: `\\n        attribute vec3 a_position;\\n        attribute vec2 aTextureCoord;\\n        attribute vec3 aVertexNormal;\\n    \\n        uniform mat4 modelMatrix;\\n        uniform mat4 viewMatrix;\\n        uniform mat4 projMatrix;\\n        uniform mat4 uNormalMatrix;\\n    \\n        varying highp vec2 vTextureCoord;\\n        varying highp vec3 vLighting;\\n    \\n        void main() {\\n            gl_Position = projMatrix * viewMatrix * modelMatrix * vec4(a_position.xyz,1.0); //\\n            vTextureCoord = aTextureCoord;\\n            highp vec3 ambientLight = vec3(0.3, 0.3, 0.3);\\n            highp vec3 directionalLightColor = vec3(1, 1, 1);\\n            highp vec3 directionalVector = normalize(vec3(0.85, 0.8, 0.75));\\n      \\n            highp vec4 transformedNormal = uNormalMatrix * vec4(aVertexNormal, 1.0);\\n      \\n            highp float directional = max(dot(transformedNormal.xyz, directionalVector), 0.0);\\n            vLighting = ambientLight + (directionalLightColor * directional);\\n        }\\n    `,\\n        fragment: `\\n        precision mediump float;\\n\\n        uniform sampler2D uSampler;\\n        uniform vec4 v_color;\\n\\n        varying highp vec2 vTextureCoord;\\n        varying highp vec3 vLighting;\\n\\n    \\n        void main() {\\n            highp vec4 texelColor = texture2D(uSampler, vTextureCoord)*color;\\n            gl_FragColor = vec4(texelColor.rgb * vLighting, texelColor.a);\\n        }\\n    `,\\n    }\\n};\\n\\n\\n*/\\n\\n\\n// CONCATENATED MODULE: ./src/light/CoreLight.js\\n\\nclass CoreLight {\\n    constructor(){\\n        this.type = 'light';\\n        this.color = [];\\n        this.intensity = 0;\\n    }\\n    createDataToWebgl (){\\n        if (this.typeLight == 'ambient'){\\n            return {\\n                    color: this.color,\\n                    intensity:this.intensity,\\n                    type: this.typeLight,\\n            };\\n        } else {\\n            return {\\n                    color: this.color,\\n                    intensity: this.intensity,\\n                    positionLight: this.position,\\n                    shiniess: this.shininess,\\n                    specularColor: this.specularColor,\\n                    specularInt: this.specularInt,\\n                    k_vertex: this.k_vertex,\\n                    type: this.typeLight,\\n            };\\n        }\\n    }\\n}\\n\\n// CONCATENATED MODULE: ./src/light/AmbientLight.js\\n\\n\\nclass AmbientLight_AmbientLight extends CoreLight {\\n    constructor (){\\n        super();\\n        this.typeLight = 'ambient';\\n    }\\n\\n}\\n\\n\\n// CONCATENATED MODULE: ./src/light/DirectionalLight.js\\n\\n\\n/*\\nconst BLACK = [0.0, 0.0, 0.0];\\nconst WHITE = [1.0, 1.0, 1.0];\\nconst RED   = [1.0, 0.0, 0.0];\\nconst GREEN = [0.0, 1.0, 0.0];\\nconst BLUE  = [0.0, 0.0, 1.0];\\nconst YELLOW = [0.6,1.0,0.5];//(60,100%,50%)\\n*/\\nclass DirectionalLight_DirectionalLight extends CoreLight{\\n    constructor (){\\n        super();\\n        this.typeLight = 'directional';\\n        this.position = new Coordinates3D();\\n        this.specularColor = [1.0,1.0,1.0];\\n        this.specularInt = 1.0;\\n        this.shininess = 10.0;\\n        this.k_vertex = 0.0;\\n    }\\n\\n\\n}\\n\\n\\n// CONCATENATED MODULE: ./src/light/PointLight.js\\n\\n\\n\\nclass PointLight_PointLight extends CoreLight{\\n    constructor (){\\n        super();\\n        this.typeLight = 'point'; \\n        this.position = new Coordinates3D();\\n        this.specularColor = [1.0,1.0,1.0];\\n        this.specularInt = 1.0;\\n        this.shininess = 10.0;\\n        this.k_vertex = 1.0;\\n    }\\n}\\n\\n\\n// CONCATENATED MODULE: ./src/geometry/PlaneGeometry.js\\n\\n\\n\\nclass PlaneGeometry_PlaneGeometry extends CoreGeometry {\\n    constructor (w,h,x,y,z){\\n        super();\\n        this.start = new Coordinates3D(x,y,z);\\n        this.w = w;\\n        this.h = h;\\n    }\\n    createVertex(){\\n        let x0 = this.start.x;\\n        let x1 = x0+ this.w;\\n        let y0 = this.start.y;\\n        let y1 = y0+this.h; \\n        let z0 = this.start.z;\\n\\n        let vertex =  [\\n            x0,y0,z0,\\n            x1,y0,z0,\\n            x0,y1,z0,\\n      \\n            x0,y1,z0,\\n            x1,y0,z0,\\n            x1,y1,z0,\\n        ];\\n        const mapCord2D = [\\n            0.0,  0.0,\\n            1.0,  0.0,\\n            0.0,  1.0,\\n            0.0,  1.0,\\n            1.0,  0.0,\\n            1.0,  1.0 \\n        ];\\n        const frontNormals = [\\n            0.0,  0.0,  1.0,\\n            0.0,  0.0,  1.0,\\n            0.0,  0.0,  1.0,\\n\\n            0.0,  0.0,  1.0,\\n            0.0,  0.0,  1.0,\\n            0.0,  0.0,  1.0,\\n        ];\\n        const backNormals = [\\n            0.0,  0.0, -1.0,\\n            0.0,  0.0, -1.0,\\n            0.0,  0.0, -1.0,\\n\\n            0.0,  0.0, -1.0,\\n            0.0,  0.0, -1.0,\\n            0.0,  0.0, -1.0,\\n        ];\\n        const topNormals = [\\n            0.0,  -1.0,  0.0,\\n            0.0,  -1.0,  0.0,\\n            0.0,  -1.0,  0.0,\\n\\n            0.0,  -1.0,  0.0,\\n            0.0,  -1.0,  0.0,\\n            0.0,  -1.0,  0.0,\\n        ];\\n        const bottomNormals = [\\n            0.0, 1.0,  0.0,\\n            0.0, 1.0,  0.0,\\n            0.0, 1.0,  0.0,\\n\\n            0.0, 1.0,  0.0,\\n            0.0, 1.0,  0.0,\\n            0.0, 1.0,  0.0,\\n        ];\\n        const leftNormals = [\\n            -1.0,  0.0,  0.0,\\n            -1.0,  0.0,  0.0,\\n            -1.0,  0.0,  0.0,\\n\\n            -1.0,  0.0,  0.0,\\n            -1.0,  0.0,  0.0,\\n            -1.0,  0.0,  0.0,\\n        ];\\n        const rightNormals = [\\n            1.0,  0.0,  0.0,\\n            1.0,  0.0,  0.0,\\n            1.0,  0.0,  0.0,\\n\\n            1.0,  0.0,  0.0,\\n            1.0,  0.0,  0.0,\\n            1.0,  0.0,  0.0,\\n        ];\\n\\n        this.partsGeometry = [\\n            this.createGeometry('part',vertex,mapCord2D,frontNormals),\\n        ];\\n\\n        //vertex = vertex.concat(frontRect.cord,backRect.cord,topVertex,bottomVertex,leftVertex,rightVertex);\\n        return this.partsGeometry;\\n    }\\n\\n}\\n\\n\\n// CONCATENATED MODULE: ./src/index.js\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nconst src_BLACK = [0.0, 0.0, 0.0, 1.0];\\nconst src_WHITE = [1.0, 1.0, 1.0, 1.0];\\nconst src_RED   = [1.0, 0.0, 0.0, 1.0];\\nconst src_GREEN = [0.0, 1.0, 0.0, 1.0];\\nconst src_BLUE  = [0.0, 0.0, 1.0, 1.0];\\n\\nlet src_image2 = new Image();\\nsrc_image2.src = '../tiles.jpeg';\\n\\nlet src_image = new Image();\\n//image.src = '../Devs_Title_Card.png';\\nsrc_image.src = '../westworld-4.jpeg';\\n\\n //image2.onload = function() {\\n  src_image.onload = function(){\\n    main(src_image,src_image2);\\n  };\\n //};\\n\\nfunction main (image1,image2){\\n  let canvas = document.getElementById('canvas');\\n  canvas.width = window.innerWidth * window.devicePixelRatio;\\n  canvas.height = window.innerHeight * window.devicePixelRatio;\\n  \\n  window.addEventListener('resize',function(){\\n    canvas.width = window.innerWidth * window.devicePixelRatio;\\n    canvas.height = window.innerHeight * window.devicePixelRatio;\\n  });\\n  \\n  // let image3 = new Image();\\n  // image3.src = '../tiles.jpeg';\\n  \\n  // let image = new Image();\\n  // //image.src = '../Devs_Title_Card.png';\\n  // image.src = '../westworld-4.jpeg';\\n  \\n  \\n  //westworld-4.jpeg\\n  \\n  let camera = new Camera_Camera; \\n  \\n  //camera.perspectiveSett.fov = 90 * Math.PI/180;\\n  //camera.perspectiveSett.zNear = 0.5;\\n  camera.perspectiveSett.zFar = 6000;\\n  camera.perspectiveSett.aspect = canvas.width/canvas.height;\\n  \\n  camera.ortographicSett.right = canvas.width;\\n  camera.ortographicSett.bottom = canvas.height;\\n  camera.ortographicSett.left = 0;\\n  camera.ortographicSett.top = 0;\\n  camera.ortographicSett.near = -3000;\\n  camera.ortographicSett.far = 3000;\\n  \\n  let fi = 0;\\n  let renderer = new WebGlRender(canvas);\\n  \\n  let boxGeom = new BoxGeometry_BoxGeometry(200,200,200,-200/2,-200/2,-200/2);\\n  let planeGeometry = new PlaneGeometry_PlaneGeometry(1000,1000,-1000/2,-1000/2);//-1000/2,-1000/2,-1000/2\\n  \\n  let boxMaterialData = {\\n    color: [1.0, 0.0, 0.5, 0.5],\\n  };\\n  let textMaterialv1 = {\\n    map: image1\\n  };\\n  let textMaterialv2 = {\\n    map: image1,\\n    color: src_RED,\\n  };\\n  let textMaterialv3 = {\\n    map: image2,\\n    //color: GREEN,\\n  };\\n\\n  let boxMaterialv2 = [\\n    new BasicMaterial_BasicMaterial ({color: src_RED}),\\n    new BasicMaterial_BasicMaterial ({color: src_GREEN}),\\n    new BasicMaterial_BasicMaterial ({color: src_BLUE}),\\n    new BasicMaterial_BasicMaterial ({color: [1.0, 0.0, 0.5, 0.5]}),\\n    new BasicMaterial_BasicMaterial ({color: [0.5, 1, 0.8, 1]}),\\n    new BasicMaterial_BasicMaterial ({color: [0.04, 0.96, 0.96, 1]})\\n  ]; \\n  let boxMaterialv5 = [\\n    new PhongMaterial_PhongMaterial ({color: src_RED}),\\n    new PhongMaterial_PhongMaterial ({color: src_GREEN}),\\n    new PhongMaterial_PhongMaterial ({color: src_BLUE}),\\n    new PhongMaterial_PhongMaterial ({color: [1.0, 0.0, 0.5, 1]}),\\n    new PhongMaterial_PhongMaterial ({color: [0.5, 1, 0.8, 1]}),\\n    new PhongMaterial_PhongMaterial ({color: [0.04, 0.96, 0.96, 1]}),\\n  ];\\n  let boxMaterialv3 = [\\n    new BasicMaterial_BasicMaterial ({color: [1.0, 0.0, 0.5, 1.0]}),\\n    new BasicMaterial_BasicMaterial(textMaterialv1)\\n    //new BasicMaterial ({color: [0.5, 1, 0, 1]}),\\n    //new BasicMaterial ({color: [1, 0, 0, 1]}),\\n    //new BasicMaterial ({color: [0.5, 1, 0, 1]}),\\n    //new BasicMaterial ({color: [0.3, 1, 0, 1]}),\\n  ];\\n  let colorBoxEdges = [\\n    [1, 0, 0, 1],\\n    [0, 0, 1, 1],\\n    [0.5, 1, 0, 1],\\n    [0.3, 1, 0, 1],\\n    [0.2, 0.6, 0.8, 1],\\n    [0, 0.5, 0.7, 1]\\n  ];\\n  \\n  let boxMaterialv1 = new BasicMaterial_BasicMaterial(boxMaterialData);\\n  let planematerial = new PhongMaterial_PhongMaterial(textMaterialv3);\\n  let boxMaterialv4 = new PhongMaterial_PhongMaterial(textMaterialv2);\\n  let boxMaterialv6 = new PhongMaterial_PhongMaterial(textMaterialv1);\\n  let boxMaterialv7 = new PhongMaterial_PhongMaterial(boxMaterialData);\\n  //console.log(boxMaterialv4);\\n\\n  let box2 = new Mesh_Mesh(boxGeom,boxMaterialv4);\\n  let box3 = new Mesh_Mesh(boxGeom,boxMaterialv6);\\n  let plane = new Mesh_Mesh(planeGeometry,planematerial);\\n  let box = new Mesh_Mesh(boxGeom,boxMaterialv2);\\n\\n\\n  \\n  //console.log(box);\\n  \\n  let scene = new Scene_Scene();\\n  \\n  scene.background = src_BLACK;\\n  \\n  const light = new AmbientLight_AmbientLight();\\n  light.color = [1.0, 1.0, 1.0];\\n  light.intensity = 0.0;\\n  \\n  const light2 = new DirectionalLight_DirectionalLight();\\n  light2.position.x = 0;\\n  light2.position.y = 0;\\n  light2.position.z = 200;\\n  light2.color = [1.0, 1.0, 1.0];\\n  light2.intensity = 1.0;\\n  \\n  \\n  const light3 = new PointLight_PointLight();\\n  // light3.position.y = -300;\\n  // light3.position.z = 300;\\n  light3.color = [1.0, 1.0, 1.0];\\n  light3.intensity = 1.0;\\n  light3.shininess = 200.0;\\n  light3.specularInt = 1.0;\\n  \\n  scene.add(light);\\n  scene.add(light3);\\n  scene.add(plane);\\n  scene.add(box);\\n  scene.add(box2);\\n  scene.add(box3);\\n\\n  \\n  plane.rotation.x = Math.PI/2;//180;\\n  //plane.rotation.x = 2*Math.PI;//180;\\n  plane.scale.x = 4;\\n  plane.scale.y = 4;\\n  camera.rotation.x  = 0.4;\\n  //camera.rotation.y = 45;\\n  \\n  let tPrev = 0;\\n  let dT = 0;\\n  \\n  \\n  // image.onload = function() {\\n  //   render();\\n  // };\\n  // image.onload = function() {\\n  //   image2.onload = function(){\\n  //     render();\\n  //   };\\n  // };\\n  \\n  render();\\n  function render (){  // render target \\n\\n    dT =  (window.performance.now()-tPrev)*60/1000;\\n    //console.log(dT,window.performance.now(),tPrev);\\n    fi += 0.005*dT;\\n  \\n    box.position.x = 0;//canvas.width/2;\\n    box.position.y = 0;//canvas.height/2;\\n    box.position.z = -500;//Math.sin(fi)*1500;\\n  \\n    box2.position.x = 500;//canvas.width/2;\\n    box2.position.y = 0;//canvas.height/2;\\n    box2.position.z = -500;//Math.sin(fi)*1500;\\n  \\n    box3.position.x = -500;//canvas.width/2;\\n    box3.position.y = 0;//canvas.height/2;\\n    box3.position.z = -500;//Math.sin(fi)*1500;\\n    //console.log(box.position.z);\\n  \\n    plane.position.x = 0;//canvas.width/2;\\n    plane.position.y = -600;//canvas.height/2;\\n    plane.position.z = -500;//Math.sin(fi)*1500;\\n    //plane.rotation.x = -fi;//180;\\n    //console.log(plane.rotation.x);\\n  \\n    //plane.rotation.x = fi;\\n  \\n    light3.position.y = 300; //* (Math.cos(fi));\\n    light3.position.z = 300 * (Math.cos(fi));\\n    //console.log(light3.position.z);\\n  \\n    box.rotation.x = fi;\\n    box.rotation.y = fi;\\n    box.rotation.z = fi;\\n  \\n    box2.rotation.x = Math.PI/2;\\n    //box2.rotation.y = fi;\\n    //box2.rotation.z = fi;\\n  \\n    //box3.rotation.x = -fi;\\n    //box3.rotation.y = fi;\\n    //box3.rotation.z = -fi;\\n  \\n    //camera.rotation.x = -fi;\\n    //console.log(camera.rotation.x);\\n  \\n    camera.position.y = 500;\\n    camera.position.z = 500;\\n  \\n    camera.ortographicSett.right = canvas.width;\\n    camera.ortographicSett.bottom = canvas.height;\\n  \\n    camera.perspectiveSett.aspect = canvas.width/canvas.height;\\n  \\n    renderer.render(scene,camera);\\n  \\n    tPrev = window.performance.now();\\n  \\n    requestAnimationFrame(render);\\n  }\\n}\\n\\n\\n\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///0\\n\")}]);","extractedComments":[]}